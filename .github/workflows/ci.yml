name: Optinetflow Node.js CI

on:
  push:
    branches:
      - main
      - dev
  

jobs:
  migration:
    runs-on: ubuntu-latest
    environment:
      name: ${{ startsWith(github.ref, 'refs/heads/main') && 'prod' || 'stage' }}
    env:
      SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_PORT: ${{ secrets.SERVER_PORT }}
      TAG_COMMIT: ${{ secrets.DOCKERHUB_USERNAME }}/optinetflow:${{ github.sha }}
      TAG_LATEST: ${{ secrets.DOCKERHUB_USERNAME }}/optinetflow:latest
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      -
        # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-pnpm-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Generate prisma client
        run: pnpm prisma generate

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.PRIVATE_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Migrate database
        env:
          DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:1111/${{ secrets.POSTGRES_DB }}
          DB_PORT: ${{ secrets.DB_PORT }}
        run: |
          ssh -fN -L 1111:localhost:${DB_PORT} -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_IP -p $SERVER_PORT 2>&1
          pnpm run migrate:deploy

      - name: 'Create id_rsa file'
        run: echo "${{ secrets.ID_RSA }}" > id_rsa

      - name: Build & Push Docker image
        env:
          PORT: ${{ secrets.PORT }}
        run: |
          echo $DOCKERHUB_TOKEN | docker login --username $DOCKERHUB_USERNAME --password-stdin
          echo "==============================> PRINT ID_RSA"
          cat id_rsa
          docker build --platform=linux/arm64 -t $TAG_COMMIT -t $TAG_LATEST --build-arg PORT=$PORT .
          docker push $TAG_COMMIT
          docker push $TAG_LATEST
          docker logout
          rm id_rsa

      - name: 'Create env file'
        run: echo "${{ vars.ENV_FILE }}" > .env

      - name: Deploy docker container
        env:
          TEMP_ENV_PATH: /home/ubuntu/temp-backend-env
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
          NETWORK_NAME: ${{ secrets.NETWORK_NAME }}
        run: |
          ssh -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_IP -p $SERVER_PORT "echo $DOCKERHUB_TOKEN | docker login --username $DOCKERHUB_USERNAME --password-stdin && mkdir -p $TEMP_ENV_PATH"
          ssh -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_IP -p $SERVER_PORT "docker pull $TAG_COMMIT"
          ssh -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_IP -p $SERVER_PORT "docker container rm -f $CONTAINER_NAME || true"
          scp -o StrictHostKeyChecking=no -P $SERVER_PORT .env $SERVER_USERNAME@$SERVER_IP:$TEMP_ENV_PATH
          ssh -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_IP -p $SERVER_PORT "docker run -d --name $CONTAINER_NAME --env-file $TEMP_ENV_PATH/.env --network=${NETWORK_NAME} --restart always $TAG_COMMIT"
          ssh -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_IP -p $SERVER_PORT "docker logout"
